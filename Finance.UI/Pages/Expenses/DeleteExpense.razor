@page "/expenses/delete/{Id:int}"
@using Finance.Core.Entities;
@using Finance.UI.Interfaces;
@inject IRequestApi<Expense> ExpensesService
@inject IRequestApi<ExpenseCategory> ExpenseCategoriesService
@inject NavigationManager NavigationManager

<h3>Delete Expense</h3>

<div class="form-group">
    <h4>Do you want to delete this?</h4>
    <table class="table table-striped table-bordered">
        <tbody>
            <tr>
                <td style="width:10%">Id</td>
                <td>@_expense.Id</td>
            </tr>
            <tr>
                <td style="width:10%">Date</td>
                <td>@_expense.DateTime.ToShortDateString()</td>
            </tr>
            <tr>
                <td style="width:10%">Amount</td>
                <td>@_expense.Amount</td>
            </tr>
            <tr>
                <td style="width:10%">Category</td>
                <td>@_expenseCategory.Name</td>
            </tr>
        </tbody>
    </table>
</div>
<div class="form-group">
    <input type="submit" value="Delete" @onclick="(async () => await Remove())" class="btn btn-danger" />
    <input type="submit" value="Cancel" @onclick="(() => Cancel())" class="btn btn-warning" />
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private Expense? _expense = new();
    private ExpenseCategory? _expenseCategory = new();

    protected override async Task OnInitializedAsync()
    {
        _expense = await ExpensesService.Find(Id);
        _expenseCategory = await ExpenseCategoriesService.Find((int)_expense.ExpenseCategoryId);
    }

    private async Task Remove()
    {
        await ExpensesService.Remove(Id);
        Cancel();
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/expenses");
    }
}
