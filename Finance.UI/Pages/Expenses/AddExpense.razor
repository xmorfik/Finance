@page "/expenses/add"
@page "/expenses/edit/{Id:int}"
@using Finance.Core.Entities;
@using Finance.UI.Interfaces;
@inject IRequestApi<Expense> ExpensesService
@inject IRequestApi<ExpenseCategory> ExpenseCategoriesService
@inject NavigationManager NavigationManager

<h3>@_title Expense</h3>

<EditForm Model="@_expense" OnValidSubmit="Save">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="DateTime" class="form-label">Date</label>
        <div class="col-md-4">
            <InputDate class="form-control" @bind-Value="_expense.DateTime " />
        </div>
        <ValidationMessage For="@(() => _expense.DateTime)" />
    </div>
    <div class="mb-3">
        <label for="Amount" class="form-label">Amount</label>
        <div class="col-md-4">
            <InputNumber class="form-control" type="decimal" max="-0.01" step="0.01" oninput="validity.valid||(value='');" @bind-Value="_expense.Amount" />
        </div>
        <ValidationMessage For="@(() => _expense.Amount)" />
    </div>
    <div class="mb-3">
        <label for="Category" class="form-label">Category</label>
        <div class="col-md-4">
            <InputSelect class="form-control" @bind-Value="_expense.ExpenseCategoryId">
                @if (_expenseCategories != null)
                {
                    @foreach (var income in _expenseCategories)
                    {
                        <option value="@income.Id">@income.Name</option>
                    }
                }
            </InputSelect>
        </div>
        <ValidationMessage For="@(() => _expense.ExpenseCategoryId)" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <button class="btn btn-warning" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }
    private string _title = "Add";
    private Expense? _expense = new();
    private ICollection<ExpenseCategory>? _expenseCategories;

    protected override async Task OnInitializedAsync()
    {
        _expenseCategories = await ExpenseCategoriesService.GetAll();
        if (Id == 0)
        {
            _expense.Amount = -1M;
            _expense.DateTime = DateTime.Now;
            _expense.ExpenseCategoryId = _expenseCategories.ElementAtOrDefault(0)?.Id;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            _title = "Edit";
            _expense = await ExpensesService.Find(Id);
        }
    }

    private async Task Save()
    {
        if (_expense?.Id > 0)
        {
            await ExpensesService.Update(_expense);
        }
        else if (_expense?.Id == null)
        {
            await ExpensesService.Add(_expense);
        }
        Cancel();
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/expenses");
    }
}
